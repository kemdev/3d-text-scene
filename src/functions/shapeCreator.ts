import * as THREE from 'three';

const loader = new THREE.TextureLoader();
const texture = loader.load('textures/uv_grid_opengl.jpg');
texture.colorSpace = THREE.SRGBColorSpace;

// it's necessary to apply these settings in order to correctly display the texture on a shape geometry

texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set(0.008, 0.008);

const group = new THREE.Group();
group.position.y = 50;

function addShape(
  group,
  shape,
  extrudeSettings,
  color,
  x,
  y,
  z,
  rx,
  ry,
  rz,
  s
) {
  // flat shape with texture
  // note: default UVs generated by THREE.ShapeGeometry are simply the x- and y-coordinates of the vertices

  let geometry = new THREE.ShapeGeometry(shape);

  let mesh = new THREE.Mesh(
    geometry,
    new THREE.MeshPhongMaterial({ side: THREE.DoubleSide, map: texture })
  );
  mesh.position.set(x, y, z - 175);
  mesh.rotation.set(rx, ry, rz);
  mesh.scale.set(s, s, s);
  group.add(mesh);

  // flat shape

  geometry = new THREE.ShapeGeometry(shape);

  mesh = new THREE.Mesh(
    geometry,
    new THREE.MeshPhongMaterial({ color: color, side: THREE.DoubleSide })
  );
  mesh.position.set(x, y, z - 125);
  mesh.rotation.set(rx, ry, rz);
  mesh.scale.set(s, s, s);
  group.add(mesh);

  // extruded shape

  geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings) as any;

  mesh = new THREE.Mesh(
    geometry,
    new THREE.MeshPhongMaterial({ color: color })
  );
  mesh.position.set(x, y, z - 75);
  mesh.rotation.set(rx, ry, rz);
  mesh.scale.set(s, s, s);
  group.add(mesh);

  addLineShape(shape, color, x, y, z, rx, ry, rz, s);
}

function addLineShape(shape, color, x, y, z, rx, ry, rz, s) {
  // lines

  shape.autoClose = true;

  const points = shape.getPoints();
  const spacedPoints = shape.getSpacedPoints(50);

  const geometryPoints = new THREE.BufferGeometry().setFromPoints(points);
  const geometrySpacedPoints = new THREE.BufferGeometry().setFromPoints(
    spacedPoints
  );

  // solid line

  let line = new THREE.Line(
    geometryPoints,
    new THREE.LineBasicMaterial({ color: color })
  );
  line.position.set(x, y, z - 25);
  line.rotation.set(rx, ry, rz);
  line.scale.set(s, s, s);
  group.add(line);

  // line from equidistance sampled points

  line = new THREE.Line(
    geometrySpacedPoints,
    new THREE.LineBasicMaterial({ color: color })
  );
  line.position.set(x, y, z + 25);
  line.rotation.set(rx, ry, rz);
  line.scale.set(s, s, s);
  group.add(line);

  // vertices from real points

  let particles = new THREE.Points(
    geometryPoints,
    new THREE.PointsMaterial({ color: color, size: 4 })
  );
  particles.position.set(x, y, z + 75);
  particles.rotation.set(rx, ry, rz);
  particles.scale.set(s, s, s);
  group.add(particles);

  // equidistance sampled points

  particles = new THREE.Points(
    geometrySpacedPoints,
    new THREE.PointsMaterial({ color: color, size: 4 })
  );
  particles.position.set(x, y, z + 125);
  particles.rotation.set(rx, ry, rz);
  particles.scale.set(s, s, s);
  group.add(particles);
}

export { addShape };
